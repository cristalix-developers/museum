apply plugin: 'java'

subprojects {
    apply plugin: 'java'

    targetCompatibility = sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
        maven {
            name = "func"
            url = uri("https://repo.c7x.ru/repository/maven-public/")
            credentials {
                username = System.getenv("CRI_REPO_LOGIN") ?: project.properties["CRI_REPO_LOGIN"] as String
                password = System.getenv("CRI_REPO_PASSWORD") ?: project.properties["CRI_REPO_PASSWORD"] as String
            }
        }
    }

    compileJava.options.encoding 'UTF-8'

    tasks.withType(JavaCompile) {
        options.encoding 'UTF-8'
    }

    dependencies {
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        compileOnly 'org.projectlombok:lombok:1.18.12'
        compileOnly 'io.netty:netty-all:4.1.50.Final'
        compileOnly 'com.google.guava:guava:29.0-jre'
        compileOnly 'com.google.code.gson:gson:2.8.6'
    }

    jar {
        from sourceSets.main.resources
        from {
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }

    compileJava.options.encoding 'UTF-8'

    tasks.withType(JavaCompile) {
        options.encoding 'UTF-8'
    }
}

allprojects {
    repositories {
        maven {
            name = "func"
            url = uri("https://repo.c7x.ru/repository/maven-public/")
            credentials {
                username = System.getenv("CRI_REPO_LOGIN") ?: project.properties["CRI_REPO_LOGIN"] as String
                password = System.getenv("CRI_REPO_PASSWORD") ?: project.properties["CRI_REPO_PASSWORD"] as String
            }
        }
    }
}