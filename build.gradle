apply plugin: 'java'

subprojects {
    if (name == 'museum-mods') return
    apply plugin: 'java'

    String user = project.properties["IMPLARIO_REPO_USER"] ?: getenv("IMPLARIO_REPO_USER")
    String key = project.properties["IMPLARIO_REPO_PASSWORD"] ?: getenv("IMPLARIO_REPO_PASSWORD")

    targetCompatibility = sourceCompatibility = '1.8'

    repositories {
        // MavenLocal is considered to be a bad practice
        // mavenLocal()
        mavenCentral()
        maven {
            url "https://repo.implario.dev/public"
        }
        maven {
            url 'https://repo.implario.dev/cristalix/'
            credentials {
                username user
                password key
            }
        }
    }

    compileJava.options.encoding 'UTF-8'

    tasks.withType(JavaCompile) {
        options.encoding 'UTF-8'
    }

    dependencies {
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        compileOnly 'org.projectlombok:lombok:1.18.12'
        compileOnly 'io.netty:netty-all:4.1.50.Final'
        compileOnly 'com.google.guava:guava:29.0-jre'
        compileOnly 'com.google.code.gson:gson:2.8.6'
    }

    jar {
        from sourceSets.main.resources
        from {
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }

    task deploy(type: Copy) {
        dependsOn build
        from jar
        String dirPath = System.getenv()["OUTPUT_DIR"]
        File file = dirPath ? file(dirPath) : rootProject.buildDir
        into file
        doLast {
            println "Deployed $jar.archiveName to $file.path"
        }
    }
}